#include "../include/Spindle.h"
#include "../include/ThreadConfig.h"
#include <iostream>
#include <fstream>

#define _TRAINING_ true
// binary file -> build/Thread-library/tests/spindleTest

void db()
{
   std::ifstream file;
   std::string readLine;
   file.open("../Thread-Library/tests/testreadFile.txt");
   while (std::getline(file, readLine));
}

void mem()
{
   int *n = new int[100];
   delete n;
}

void math()
{
   int a = 25;
   for (int i = 0; i < 10000; i++)
   {
      a++;
   }
}

void io()
{
   std::cout << "Some function executing context switch\n";
}
//====
void test_1()
{
   // ====
   io();
   math();
   io();
   db();
   mem();
   math();
   math();
   db();
   io();
   math();
   db();
}
void test_2()
{
   // ====
   math();
   mem();
   math();
   math();
   db();
   mem();
   math();
   db();
}
void test_3()
{
   // ====
   io();
   mem();
   io();
   math();
   io();
   db();
   mem();
   math();
   math();
   db();
}
void test_4()
{
   // ====
   db();
   io();
   math();
   io();
   db();
   math();
   db();
   io();
   mem();
   db();
}
void test_5()
{
   // ====
   mem();
   db();
   io();
   mem();
   math();
   io();
   mem();
   db();
   io();
   math();
   db();
   mem();
   math();
   db();
}
void test_6()
{
   // ====
   io();
   mem();
   io();
   db();
   mem();
   math();
   mem();
   db();
   math();
   db();
}
void test_7()
{
   // ====
   io();
   math();
   io();
   db();
   mem();
   math();
   mem();
   db();
   io();
   mem();
   db();
}
void test_8()
{
   // ====
   mem();
   math();
   db();
   io();
   math();
   io();
   db();
}
void test_9()
{
   // ====
   mem();
   io();
   mem();
   io();
   math();
   mem();
   math();
   mem();
   db();
}
// ====

int main(int argc, char *argv[])
{
   Config &config = Config::getInstance(RUN_MODE::PERFORMANCE, THREAD_MODE::SPINDLE);
   config.setThreadMode(THREAD_MODE::SPINDLE);
   config.setSchedulingType(SCHEDULING::ML);
   Spindle &spindle = Spindle::getInstance(&config);
   spindle.init(2);
   //spindle.addProcess(mem);
   //spindle.addProcess(math);
   //spindle.addProcess(db);
   //spindle.addProcess(io);
   spindle.addProcess(test_1);
   spindle.addProcess(test_2);
   spindle.addProcess(test_3);
   spindle.addProcess(test_4);
   spindle.addProcess(test_5);
   spindle.addProcess(test_6);
   spindle.addProcess(test_7);
   spindle.addProcess(test_8);
   spindle.addProcess(test_9);
   spindle.done();
}